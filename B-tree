#include "bits/stdc++.h"

using namespace std;

const int MAX_KEYS = 5;

struct btreenode {
    bool isLeaf;
    int numKeys;
    vector<int> keys;
    vector<btreenode*> children;
};
btreenode* createNode(bool isLeaf) {
    btreenode* newNode = new btreenode();
    newNode->isLeaf = isLeaf;
    newNode->numKeys = 0;
    newNode->keys.resize(MAX_KEYS);
    newNode->children.resize(MAX_KEYS + 1);
    return newNode;
}
int searchKey(const btreenode* node, int key) {
    int idx = 0;
    while (idx < node->numKeys && key > node->keys[idx]) {
        idx++;
    }
    return idx;
}
bool search(btreenode* root, int key) {
    if (root == nullptr) {
        return false;
    }
    int idx = searchKey(root, key);
    if (idx < root->numKeys && root->keys[idx] == key) {
        return true;
    }
    if (root->isLeaf) {
        return false;
    }
    return search(root->children[idx], key);
}
void splitChild(btreenode* parent, int idx, btreenode* child) {
    btreenode* newNode = createNode(child->isLeaf);
    newNode->numKeys = MAX_KEYS / 2 - 1;
    for (int i = 0; i < newNode->numKeys; i++) {
        newNode->keys[i] = child->keys[i + MAX_KEYS / 2];
    }
    if (!child->isLeaf) {
        for (int i = 0; i < MAX_KEYS / 2; i++) {
            newNode->children[i] = child->children[i + MAX_KEYS / 2];
        }
    }
    child->numKeys = MAX_KEYS / 2 - 1;
    for (int i = parent->numKeys; i > idx; i--) {
        parent->children[i + 1] = parent->children[i];
    }
    parent->children[idx + 1] = newNode;
    for (int i = parent->numKeys - 1; i >= idx; i--) {
        parent->keys[i + 1] = parent->keys[i];
    }
    parent->keys[idx] = child->keys[MAX_KEYS / 2 - 1];
    parent->numKeys++;
}
void insertNonFull(btreenode* node, int key) {
    int idx = node->numKeys - 1;
    if (node->isLeaf) {
        while (idx >= 0 && key < node->keys[idx]) {
            node->keys[idx + 1] = node->keys[idx];
            idx--;
        }
        node->keys[idx + 1] = key;
        node->numKeys++;
    } else {
        while (idx >= 0 && key < node->keys[idx]) {
            idx--;
        }
        idx++;
        if (node->children[idx]->numKeys == MAX_KEYS) {
            splitChild(node, idx, node->children[idx]);
            if (key > node->keys[idx]) {
                idx++;
            }
        }
        insertNonFull(node->children[idx], key);
    }
}
void insert(btreenode*& root, int key) {
    if (root == nullptr) {
        root = createNode(true);
        root->keys[0] = key;
        root->numKeys++;
    } else if (root->isLeaf) {
        int idx = searchKey(root, key);
        for (int i = root->numKeys; i > idx; i--) {
            root->keys[i] = root->keys[i - 1];
        }
        root->keys[idx] = key;
        root->numKeys++;
    } else {
        int idx = searchKey(root, key);
        if (idx < root->numKeys && root->keys[idx] == key) {
            return;
        }
        if (root->children[idx]->numKeys == MAX_KEYS) {
            splitChild(root, idx, root->children[idx]);
            if (key > root->keys[idx]) {
                idx++;
            }
        }
        insert(root->children[idx], key);
    }
}
int findPredecessor(btreenode* node) {
    while (!node->isLeaf) {
        node = node->children[node->numKeys];
    }
    return node->keys[node->numKeys - 1];
}
int findSuccessor(btreenode* node) {
    while (!node->isLeaf) {
        node = node->children[0];
    }
    return node->keys[0];
}
void mergeNodes(btreenode* parent, int idx) {
    btreenode* child = parent->children[idx];
    btreenode* sibling = parent->children[idx + 1];
    child->keys[child->numKeys] = parent->keys[idx];
    child->numKeys++;
    for (int i = 0; i < sibling->numKeys; i++) {
        child->keys[child->numKeys + i] = sibling->keys[i];
    }
    if (!child->isLeaf) {
        for (int i = 0; i <= sibling->numKeys; i++) {
            child->children[child->numKeys + i] = sibling->children[i];
        }
    }
    for (int i = idx + 1; i < parent->numKeys; i++) {
        parent->keys[i - 1] = parent->keys[i];
        parent->children[i] = parent->children[i + 1];
    }
    parent->numKeys--;
    delete sibling;
}
void borrowFromLeft(btreenode* parent, int idx) {
    btreenode* child = parent->children[idx];
    btreenode* sibling = parent->children[idx - 1];
    for (int i = child->numKeys - 1; i >= 0; i--) {
        child->keys[i + 1] = child->keys[i];
    }
    if (!child->isLeaf) {
        for (int i = child->numKeys; i >= 0; i--) {
            child->children[i + 1] = child->children[i];
        }
    }
    child->keys[0] = parent->keys[idx - 1];
    child->numKeys++;
    parent->keys[idx - 1] = sibling->keys[sibling->numKeys - 1];
    if (!child->isLeaf) {
        child->children[0] = sibling->children[sibling->numKeys];
    }
    sibling->numKeys--;
}
void borrowFromRight(btreenode* parent, int idx) {
    btreenode* child = parent->children[idx];
    btreenode* sibling = parent->children[idx + 1];
    child->keys[child->numKeys] = parent->keys[idx];
    child->numKeys++;
    parent->keys[idx] = sibling->keys[0];
    for (int i = 1; i < sibling->numKeys; i++) {
        sibling->keys[i - 1] = sibling->keys[i];
    }
    if (!child->isLeaf) {
        child->children[child->numKeys] = sibling->children[0];
        for (int i = 1; i <= sibling->numKeys; i++) {
            sibling->children[i - 1] = sibling->children[i];
        }
    }
    sibling->numKeys--;
}
void deletenode(btreenode*& root, int key) {
    int idx = searchKey(root, key);
    if (idx < root->numKeys && root->keys[idx] == key) {
        if (root->isLeaf) {
            for (int i = idx; i < root->numKeys - 1; i++) {
                root->keys[i] = root->keys[i + 1];
            }
            root->numKeys--;
        } else {
            btreenode* predChild = root->children[idx];
            btreenode* succChild = root->children[idx + 1];
            if (predChild->numKeys >= MAX_KEYS / 2) {
                int predecessor = findPredecessor(predChild);
                root->keys[idx] = predecessor;
                deletenode(predChild, predecessor);
            } else if (succChild->numKeys >= MAX_KEYS / 2) {
                int successor = findSuccessor(succChild);
                root->keys[idx] = successor;
                deletenode(succChild, successor);
            } else {
                mergeNodes(root, idx);
                deletenode(predChild, key);
            }
        }
    } else {
        if (root->isLeaf) {
            cout << "Key not found in the B-tree" << endl;
            return;
        }
        bool isKeyInLastChild = (idx == root->numKeys);
        if (root->children[idx]->numKeys < MAX_KEYS / 2) {
            if (idx > 0 && root->children[idx - 1]->numKeys >= MAX_KEYS / 2) {
                borrowFromLeft(root, idx);
            } else if (idx < root->numKeys && root->children[idx + 1]->numKeys >= MAX_KEYS / 2) {
                borrowFromRight(root, idx);
            } else {
                if (isKeyInLastChild) {
                    idx--;
                }
                mergeNodes(root, idx);
            }
        }
        deletenode(root->children[idx], key);
    }
}
void print(btreenode* root) {
    if (root != nullptr) {
        for (int i = 0; i < root->numKeys; i++) {
            print(root->children[i]);
            cout << root->keys[i] << " ";
        }
        print(root->children[root->numKeys]);
    }
}
void freeBTree(btreenode* root) {
    if (root != nullptr) {
        if (root->isLeaf) {
            delete root;
        } else {
            for (int i = 0; i <= root->numKeys; i++) {
                freeBTree(root->children[i]);
            }
            delete root;
        }
    }
}
int main() {
    btreenode* root = nullptr;
    insert(root, 8); insert(root, 2); insert(root, 6);
    insert(root, 3); insert(root, 9); insert(root, 11);
    insert(root, 7); insert(root, 5);
    cout << "B-tree: ";
    
    print(root); cout << endl;
    deletenode(root, 3);  deletenode(root, 12); deletenode(root, 7);
    cout << "B-tree after deletion: ";
    print(root); cout << endl;
    
    int key;  cout << "Enter key to search: ";  cin >> key;
    cout << "Searching for key " << key << ": " << (search(root, key) ? "Found" : "Not Found") << endl;
    freeBTree(root);
    return 0;
}
