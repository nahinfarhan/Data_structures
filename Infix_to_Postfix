#include "bits/stdc++.h"

using namespace std;

bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

string convertBraces(const string expression) {
    string temp = expression;
    for (char c : temp) {
        if (c == '{')
            c = '(';
        else if (c == '}')
            c = ')';
    }
    return temp;
}

bool checkBraces(const string expression) {
    stack<char> stack;
    for (char c : expression) {
        if (c == '(')
            stack.push(c);
        else if (c == ')') {
            if (stack.empty())
                return true;
            stack.pop();
        }
    }
    return !stack.empty();
}

string infixToPostfix(const string infix) {
    string postfix;
    stack<char> stack;
    unordered_map<char, int> precedence;
    precedence['+'] = 1;
    precedence['-'] = 1;
    precedence['*'] = 2;
    precedence['/'] = 2;

    stringstream strsm(infix);
    string token;

    while (strsm >> token) {
        char c = token[0];

        if (isdigit(c)) {
            postfix += token;
            postfix += ' ';
        } else if (isOperator(c)) {
            while (!stack.empty() && stack.top() != '(' && precedence[stack.top()] >= precedence[c]) {
                postfix += stack.top();
                postfix += ' ';
                stack.pop();
            }
            stack.push(c);
        } else if (c == '(') {
            stack.push(c);
        } else if (c == ')') {
            while (!stack.empty() && stack.top() != '(') {
                postfix += stack.top();
                postfix += ' ';
                stack.pop();
            }
            stack.pop();
        }
    }
    while (!stack.empty()) {
        postfix += stack.top();
        postfix += ' ';
        stack.pop();
    }

    return postfix;
}

int main() {
    string infixExpression = "{ 6 * 15 / ( 6 - 3 ) }";
    string Exp = convertBraces(infixExpression);
    if (checkBraces(Exp)) {
        cout << "Error: Extra or unmatched braces in the expression." << endl;
        return 0;
    }
    while (Exp.find("()") != string::npos) {
        Exp = Exp.substr(0, Exp.find("()")) +
                            Exp.substr(Exp.find("()") + 2);
    }
    string postfixExpression = infixToPostfix(Exp);

    cout << "Infix Expression: " << Exp << endl;
    cout << "Postfix Expression: " << postfixExpression << endl;

    return 0;
}
