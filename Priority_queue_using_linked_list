#include "bits/stdc++.h"

using namespace std;
struct Node {
    int data;
    int priority;
    Node* next;
};

Node* front = nullptr;
bool isEmpty() {
    return (front == nullptr);
}
void enqueue(int value, int priority) {
    Node* newNode = new Node;
    newNode->data = value;
    newNode->priority = priority;
    newNode->next = nullptr;

    if (isEmpty() || priority < front->priority) {
        newNode->next = front;
        front = newNode;
    } else {
        Node* temp = front;
        while (temp->next != nullptr && priority >= temp->next->priority) {
            temp = temp->next;
        }
        newNode->next = temp->next;
        temp->next = newNode;
    }
    cout << "Enqueued " << value << " with priority " << priority << "." << endl;
}

void dequeue() {
    if (isEmpty()) {
        cout << "Priority queue is empty. Cannot dequeue." << endl;
        return;
    }
    Node* temp = front;
    int value = temp->data;
    front = front->next;
    delete temp;

    cout << "Dequeued " << value << "." << endl;
}

void displayPriorityQueue() {
    if (isEmpty()) {
        cout << "Priority queue is empty." << endl;
        return;
    }
    Node* current = front;
    cout << "Priority Queue: ";
    while (current != nullptr) {
        cout << "(" << current->data << ", " << current->priority << ") ";
        current = current->next;
    }
    cout << endl;
}

int main() {
    enqueue(10, 2);
    enqueue(15, 2);
    enqueue(20, 1);
    enqueue(17, 1);
    enqueue(5, 3);
    displayPriorityQueue(); 
    dequeue();
    displayPriorityQueue();
    dequeue();
    displayPriorityQueue();  

    return 0;
}
