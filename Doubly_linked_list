//Doubly linked list
#include "bits/stdc++.h"

using namespace std;
struct Node
{
    int data;
    Node *prev;
    Node *next;
};

Node *createNode(int value)
{
    Node *newNode = new Node;
    newNode->data = value;
    newNode->prev = nullptr;
    newNode->next = nullptr;
    return newNode;
}

void insrtEnd(Node **head, int value)
{
    Node *newNode = createNode(value);
    if (*head == nullptr)
    {
        *head = newNode;
    }
    else
    {
        Node *curr = *head;
        while (curr->next != nullptr)
        {
            curr = curr->next;
        }
        curr->next = newNode;
        newNode->prev = curr;
    }
}

void insrtBegin(Node **head, int value)
{
    Node *newNode = createNode(value);
    if (*head == nullptr)
    {
        *head = newNode;
    }
    else
    {
        newNode->next = *head;
        (*head)->prev = newNode;
        *head = newNode;
    }
}

void insrtAfter(Node** head, int value, int newValue) {
    if (*head == nullptr) {
        cout << "Linked list is empty. Insertion failed." << endl;
        return;
    }

    Node* curr = *head;
    while (curr != nullptr) {
        if (curr->data == value) {
            Node* newNode = createNode(newValue);
            newNode->prev = curr;
            newNode->next = curr->next;
            if (curr->next != nullptr) {
                curr->next->prev = newNode;
            }
            curr->next = newNode;
            cout << "Node with value " << newValue << " inserted after " << value << "." << endl;
            return;
        }
        curr = curr->next;
    }

    cout << "Value " << value << " not found. Insertion failed." << endl;
}

void deleteNode(Node **head, int value)
{
    if (*head == nullptr)
    {
        cout << "Linked list is empty. Deletion failed." << endl;
        return;
    }

    Node *curr = *head;
    while (curr != nullptr)
    {
        if (curr->data == value)
        {
            if (curr->prev == nullptr)
            {
                *head = curr->next;
                if (curr->next != nullptr)
                {
                    curr->next->prev = nullptr;
                }
            }
            else
            {
                curr->prev->next = curr->next;
                if (curr->next != nullptr)
                {
                    curr->next->prev = curr->prev;
                }
            }
            delete curr;
            cout << "Node with value " << value << " deleted." << endl;
            return;
        }
        curr = curr->next;
    }

    cout << "Value " << value << " not found. Deletion failed." << endl;
}

void traverseList(Node *head)
{
    Node *curr = head;
    while (curr != nullptr)
    {
        cout << curr->data << " -> ";
        curr = curr->next;
    }

    cout << "NULL" << endl;
}

int main()
{
    Node *head = nullptr;
    insrtBegin(&head, 11);
    
    cout << "Linked List: ";
    traverseList(head);

    insrtEnd (&head, 13);
    insrtEnd (&head, 15);
    cout << "\nUpdated Linked List after insertion at end: ";
    traverseList (head);

    insrtAfter (&head, 13, 17);
    insrtAfter (&head, 18, 17);
    cout << "\nUpdated Linked List after insertion after value: ";
    traverseList (head);

    deleteNode (&head, 13);
    deleteNode (&head, 15);
    cout << "\nUpdated Linked List after deletion: ";
    traverseList (head);

    deleteNode (&head, 11);
    cout << "\nUpdated Linked List after deletion: ";
    traverseList (head);

    deleteNode (&head, 18);

    cout << "\nUpdated Linked List after deletion: ";
    traverseList (head);

    return 0;
}
